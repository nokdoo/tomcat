<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="class-loader-howto.html">

    &project;

    <properties>
        <author email="craigmcc@apache.org">Craig R. McClanahan</author>
        <author email="yoavs@apache.org">Yoav Shapira</author>
        <title>Class Loader HOW-TO</title>
    </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

<section name="Overview">

<p>Like many server applications, Tomcat installs a variety of class loaders
(that is, classes that implement <code>java.lang.ClassLoader</code>) to allow
different portions of the container, and the web applications running on the
container, to have access to different repositories of available classes and
resources.  This mechanism is used to provide the functionality defined in the
Servlet Specification, version 2.4&#160;&#8212; in particular, Sections 9.4
and 9.6.</p>

<p class="kor">
많은 서버 어플리케이션처럼, 톰캣은 컨테이너의 다른 부분과 컨테이너에서 실행 중인 웹 어플리케이션이 사용 가능한 클래스와 자원의 다른 저장소에 대한 액세스 하도록 다양한 클래스 로더를 설치한다. (이 클래스 로더들은 <code>java.lang.ClassLoader</code>을 구현하는 클래스다.)
</p>

<p>In a Java environment, class loaders are
arranged in a parent-child tree.  Normally, when a class loader is asked to
load a particular class or resource, it delegates the request to a parent
class loader first, and then looks in its own repositories only if the parent
class loader(s) cannot find the requested class or resource.  Note, that the
model for web application class loaders <em>differs</em> slightly from this,
as discussed below, but the main principles are the same.</p>

<p class="kor">
자바 환경에서 클래스 로더들은 부모-자식 트리에 배치된다. 일반적으로 클래스 로더가 특정 클래스나 자원을 로드하기 위해 요청받을 때, 클래스 로더는 부모 클래스 로더에게 이 요청을 위임한다. 그리고 부모 클래스 로더가 요청 받은 클래스나 자원을 찾을 수 없을 때만 자신의 저장소를 찾는다. 아래에서 설명하는 웹 어플리케이션에 대한 모델은 이것과는 약간 <em>다르다</em>. 하지만 주된 원칙은 같다.
</p>

<p>When Tomcat is started, it creates a set of class loaders that are
organized into the following parent-child relationships, where the parent
class loader is above the child class loader:</p>

<p class="kor">
톰캣은 시작될 때, 다음의 부모-자식 관계로 구성된 클래스 로더의 집합을 생성한다. 그림에서 부모 클래스 로더는 자식 클래스 로더 위에 있다.
</p>

<source>      Bootstrap
          |
       System
          |
       Common
       /     \
  Webapp1   Webapp2 ...</source>

<p>The characteristics of each of these class loaders, including the source
of classes and resources that they make visible, are discussed in detail in
the following section.</p>

<p class="kor">
이 클래스 로더 각각의 특징은, 클래스 소스와 클래스 로더가 시각화할 수 있는 자원을 포함하여 다음 절에서 자세히 설명한다.
</p>

</section>

<section name="Class Loader Definitions">

<p>As indicated in the diagram above, Tomcat creates the following class
loaders as it is initialized:</p>

<p class="kor">
위의 다이어그램에서 나타났듯이 톰캣은 초기화로써 다음의 클래스 로더를 생성한다.
</p>

<ul>
<li><p><strong>Bootstrap</strong> &#8212; This class loader contains the basic
    runtime classes provided by the Java Virtual Machine, plus any classes from
    JAR files present in the System Extensions directory
    (<code>$JAVA_HOME/jre/lib/ext</code>).  <em>Note</em>: some JVMs may
    implement this as more than one class loader, or it may not be visible
    (as a class loader) at all.</p>
	<p class="kor">
		<strong>Bootstrap</strong> &#8212; 이 클래스 로더는 JVM으로부터 제공받은 기본 런타임 클래스와 System Extensions directory(<code>$JAVA_HOME/jre/lib/ext</code>)에 있는 JAR파일의 클래스를 포함한다. <em>어떤 JVM은 이것을 하나 이상의 클래스 로더로 구현하거나, 클래스 로더로서 보여지지 않을 수 있다.</em>
	</p>
</li>
<li><p><strong>System</strong> &#8212; This class loader is normally initialized
    from the contents of the <code>CLASSPATH</code> environment variable.  All
    such classes are visible to both Tomcat internal classes, and to web
    applications.  However, the standard Tomcat startup scripts
    (<code>$CATALINA_HOME/bin/catalina.sh</code> or
    <code>%CATALINA_HOME%\bin\catalina.bat</code>) totally ignore the contents
    of the <code>CLASSPATH</code> environment variable itself, and instead
    build the System class loader from the following repositories:
    </p>
	<p class="kor">
		<strong>System</strong> &#8212; 이 클래스 로더는 일반적으로 <code>CLASSPATH</code> 환경 변수의 내용에 의해서 초기화된다. 이런 모든 클래스는 톰캣의 내부 클래스와 웹 어플리케이션에 보여진다. 하지만 표준 톰캣 startup 스크립트 (<code>$CATALINA_HOME/bin/catalina.sh</code> 또는 <code>%CATALINA_HOME%\bin\catalina.bat</code>)은 전적으로 <code>CLASSPATH</code> 환경 변수의 내용을 무시한다. 대신에, System 클래스 로더를 다음의 저장소에서 빌드한다.
	</p>
    <ul>
    <li><p><em>$CATALINA_HOME/bin/bootstrap.jar</em> &#8212; Contains the
        main() method that is used to initialize the Tomcat server, and the
        class loader implementation classes it depends on.</p>
		<p class="kor">
			<em>$CATALINA_HOME/bin/bootstrap.jar</em> &#8212; 톰캣 서버를 초기화하기 위해 사용되는 main() 메소드와, 이 메소드가 의존하는 클래스 로더 구현 클래스를 포함한다.
		</p>
	</li>
    <li><p><em>$CATALINA_BASE/bin/tomcat-juli.jar</em> or
        <em>$CATALINA_HOME/bin/tomcat-juli.jar</em> &#8212; Logging
        implementation classes. These include enhancement classes to
        <code>java.util.logging</code> API, known as Tomcat JULI,
        and a package-renamed copy of Apache Commons Logging library
        used internally by Tomcat.
        See <a href="logging.html">logging documentation</a> for more
        details.</p>
		<p class="kor">
			<em>$CATALINA_BASE/bin/tomcat-juli.jar</em> 또는 <em>$CATALINA_HOME/bin/tomcat-juli.jar</em> &#8212; 로깅 구현 클래스. 이것은 Tomcat JULI로 알려진 <code>java.util.logging</code> API에 대한 향상 클래스와 톰캣으로부터 내부적으로 사용되는 Apache Commons Logging library의 이름이 바뀐 복사본 패키지를 포함한다.
		</p>
        <p>If <code>tomcat-juli.jar</code> is present in
        <em>$CATALINA_BASE/bin</em>, it is used instead of the one in
        <em>$CATALINA_HOME/bin</em>. It is useful in certain logging
        configurations</p>
		<p class="kor">
			<code>tomcat-juli.jar</code>는 <em>$CATALINA_BASE/bin</em>에 존재한다면, <em>$CATALINA_HOME/bin</em>에 위치한 것 대신에 사용된다. 이것은 logging configurations에 유용하다.
		</p>
		</li>
    <li><p><em>$CATALINA_HOME/bin/commons-daemon.jar</em> &#8212; The classes
        from <a href="http://commons.apache.org/daemon/">Apache Commons
        Daemon</a> project.
        This JAR file is not present in the <code>CLASSPATH</code> built by
        <code>catalina.bat</code>|<code>.sh</code> scripts, but is referenced
        from the manifest file of <em>bootstrap.jar</em>.</p>
		<p class="kor">
			<em>$CATALINA_HOME/bin/commons-daemon.jar</em> &#8212; <a href="http://commons.apache.org/daemon/">Apache Commons Daemon</a> 프로젝트의 클래스. 이 JAR 파일은 <code>catalina.bat</code>|<code>.sh</code> 스크립트에 의해 빌드된 <code>CLASSPATH</code>에 존재하지 않는다. 하지만 <em>bootstrap.jar</em>의 manifest 파일에 의해서 참조된다.
		</p>
		</li>
    </ul>
    </li>
<li><p><strong>Common</strong> &#8212; This class loader contains additional
    classes that are made visible to both Tomcat internal classes and to all
    web applications.</p>
	<p class="kor">
		<strong>Common</strong> &#8212; 이 클래스 로더는 톰캣 내부 클래스와 모든 웹 어플리케이션에서 볼 수 있도록 만들어진 추가적인 클래스를 포함한다.
	</p>
    <p>Normally, application classes should <strong>NOT</strong>
    be placed here.  The locations searched by this class loader are defined by
    the <code>common.loader</code> property in
    $CATALINA_BASE/conf/catalina.properties. The default setting will search the
    following locations in the order they are listed:</p>
	<p class="kor">
		일반적으로 어플리케이션 클래스는 여기에 위치하지 <strong>않는다</strong>. 이 클래스 로더에 의해 찾아진 위치는 $CATALINA_BASE/conf/catalina.properties의 <code>common.loader</code> property에 의해 정의된다. 기본 세팅은 다음의 위치를 순서대로 찾는다.
	</p>	
    <ul>
      <li>unpacked classes and resources in <code>$CATALINA_BASE/lib</code></li>
      <li>JAR files in <code>$CATALINA_BASE/lib</code></li>
      <li>unpacked classes and resources in <code>$CATALINA_HOME/lib</code></li>
      <li>JAR files in <code>$CATALINA_HOME/lib</code></li>
    </ul>
    <p>By default, this includes the following:</p>
	<p class="kor">기본 값은 다음을 포함한다.</p>
    <ul>
    <li><em>annotations-api.jar</em> &#8212; JavaEE annotations classes.</li>
    <li><em>catalina.jar</em> &#8212; Implementation of the Catalina servlet
        container portion of Tomcat.</li>
    <li><em>catalina-ant.jar</em> &#8212; Tomcat Catalina Ant tasks.</li>
    <li><em>catalina-ha.jar</em> &#8212; High availability package.</li>
    <li><em>catalina-storeconfig.jar</em> &#8212; Generation of XML
        configuration files from current state</li>
    <li><em>catalina-tribes.jar</em> &#8212; Group communication package.</li>
    <li><em>ecj-*.jar</em> &#8212; Eclipse JDT Java compiler.</li>
    <li><em>el-api.jar</em> &#8212; EL 3.0 API.</li>
    <li><em>jasper.jar</em> &#8212; Tomcat Jasper JSP Compiler and Runtime.</li>
    <li><em>jasper-el.jar</em> &#8212; Tomcat Jasper EL implementation.</li>
    <li><em>jsp-api.jar</em> &#8212; JSP 2.3 API.</li>
    <li><em>servlet-api.jar</em> &#8212; Servlet 4.0 API.</li>
    <li><em>tomcat-api.jar</em> &#8212; Several interfaces defined by Tomcat.</li>
    <li><em>tomcat-coyote.jar</em> &#8212; Tomcat connectors and utility classes.</li>
    <li><em>tomcat-dbcp.jar</em> &#8212; Database connection pool
        implementation based on package-renamed copy of Apache Commons Pool
        and Apache Commons DBCP.</li>
    <li><em>tomcat-i18n-**.jar</em> &#8212; Optional JARs containing resource bundles
        for other languages. As default bundles are also included in each
        individual JAR, they can be safely removed if no internationalization
        of messages is needed.</li>
    <li><em>tomcat-jdbc.jar</em> &#8212; An alternative database connection pool
        implementation, known as Tomcat JDBC pool. See
        <a href="jdbc-pool.html">documentation</a> for more details.</li>
    <li><em>tomcat-util.jar</em> &#8212; Common classes used by various components of
        Apache Tomcat.</li>
    <li><em>tomcat-websocket.jar</em> &#8212; WebSocket 1.1 implementation</li>
    <li><em>websocket-api.jar</em> &#8212; WebSocket 1.1 API</li>
    </ul></li>
<li><p><strong>WebappX</strong> &#8212; A class loader is created for each web
    application that is deployed in a single Tomcat instance.  All unpacked
    classes and resources in the <code>/WEB-INF/classes</code> directory of
    your web application, plus classes and resources in JAR files
    under the <code>/WEB-INF/lib</code> directory of your web application,
    are made visible to this web application, but not to other ones.</p>
	<p class="kor">
		<strong>WebappX</strong> &#8212; 하나의 클래스 로더는 단일 톰캣 인스턴스에 배포된 각 웹 어플리케이션에 대해 생성된다. 당신의 웹 어플리케이션의 <code>/WEB-INF/classes</code> 디렉토리에 압축이 풀린 모든 클래스와, 당신의 웹 어플리케이션의 <code>/WEB-INF/lib</code>에 있는 JAR 파일들의 클래스와 자원은 이 웹 어플리케이션에 보여진다. 이외의 것들에게는 보여지지 않는다.
	</p>
	</li>
</ul>

<p>As mentioned above, the web application class loader diverges from the
default Java delegation model (in accordance with the recommendations in the
Servlet Specification, version 2.4, section 9.7.2 Web Application Classloader).
When a request to load a
class from the web application's <em>WebappX</em> class loader is processed,
this class loader will look in the local repositories <strong>first</strong>,
instead of delegating before looking.  There are exceptions. Classes which are
part of the JRE base classes cannot be overridden. There are some exceptions
such as the XML parser components which can be overridden using the appropriate
JVM feature which is the endorsed standards override feature for Java &lt;= 8
and the upgradeable modules feature for Java 9+.
Lastly, the web application class loader will always delegate first for JavaEE
API classes for the specifications implemented by Tomcat
(Servlet, JSP, EL, WebSocket). All other class loaders in Tomcat follow the
usual delegation pattern.</p>

<p class="kor">
	언급했듯이, 웹 어플리케이션 클래스 로더는 기본 자바 모델(9.7.2절의 웹 어플리케이션 클래스 로더, Servlet Specification version 2.4의 권고에 따른)로부터 갈라진다. 웹 어플리케이션의 <em>WebappX</em> 클래스로부터 클래스를 로드하기 위한 요청이 처리될 때, 이 클래스 로더는 위임하기보다는 <strong>우선적으로</strong> 로컬 저장소에서 찾는다. 예외가 존재하기도 한다. JRE 기본 클래스에 속한 클래스는 오버라이드 될 수 없다. 여기에는, 표준을 보장하는 적절한 JVM 특성을 사용하여 오버라이드 된 XML parser 컴포넌트가, Java 8 이하의 특성과 Java 9 이상의 업그레이드 가능한 모듈의 특성을 오버라이드 한다. 마지막으로 웹 어플리케이션 클래스 로더는 항상 우선적으로, 톰캣(Servlet, JSP, EL, WebSocket)에 의해 구현된 명세를 위한 JavaEE API 클래스에 위임한다. 이외의 모든 톰캣 클래스 로더는 다음의 위임 패턴을 따른다.
</p>

<p>Therefore, from the perspective of a web application, class or resource
loading looks in the following repositories, in this order:</p>
<p class="kor">
	따라서 웹 어플리케이션의 관점에서 볼 때, 클래스와 자원 로드는 다음의 저장소 순서대로 나타난다.
</p>
<ul>
<li>Bootstrap classes of your JVM</li>
<li><em>/WEB-INF/classes</em> of your web application</li>
<li><em>/WEB-INF/lib/*.jar</em> of your web application</li>
<li>System class loader classes (described above)</li>
<li>Common class loader classes (described above)</li>
</ul>

<p>If the web application class loader is
<a href="config/loader.html">configured</a> with
<code>&lt;Loader delegate=&quot;true&quot;/&gt;</code>
then the order becomes:</p>

<p class="kor">
	웹 어플리케이션 클래스 로더가 <code>&lt;Loader delegate=&quot;true&quot;/&gt;</code>로 구성되어 있다면 다음 순서를 따른다.

</p>
<ul>
<li>Bootstrap classes of your JVM</li>
<li>System class loader classes (described above)</li>
<li>Common class loader classes (described above)</li>
<li><em>/WEB-INF/classes</em> of your web application</li>
<li><em>/WEB-INF/lib/*.jar</em> of your web application</li>
</ul>

</section>


<section name="XML Parsers and Java">

<p>Starting with Java 1.4 a copy of JAXP APIs and an XML parser are packed
inside the JRE.  This has impacts on applications that wish to use their own
XML parser.</p>

<p>In old versions of Tomcat, you could simply replace the XML parser
in the Tomcat libraries directory to change the parser
used by all web applications.  However, this technique will not be effective
when you are running modern versions of Java, because the usual class loader
delegation process will always choose the implementation inside the JDK in
preference to this one.</p>

<p>Java &lt;= 8 supports a mechanism called the "Endorsed Standards Override
Mechanism" to allow replacement of APIs created outside of the JCP
(i.e. DOM and SAX from W3C).  It can also be used to update the XML parser
implementation.  For more information, see:
<a href="http://docs.oracle.com/javase/1.5.0/docs/guide/standards/index.html">
http://docs.oracle.com/javase/1.5.0/docs/guide/standards/index.html</a>. For
Java 9+, use the upgradeable modules feature.</p>

<p>Tomcat utilizes the endorsed mechanism by including the system property setting
<code>-Djava.endorsed.dirs=$JAVA_ENDORSED_DIRS</code> in the
command line that starts the container. The default value of this option is
<em>$CATALINA_HOME/endorsed</em>. This <em>endorsed</em> directory is not
created by default. Note that the endorsed feature is no longer supported
with Java 9 and the above system property will only be set if either the
directory <em>$CATALINA_HOME/endorsed</em> exists, or the variable
<code>JAVA_ENDORSED_DIRS</code> has been set.
</p>

<p>Note that overriding any JRE component carries risk. If the overriding
component does not provide a 100% compatible API (e.g. the API provided by
Xerces is not 100% compatible with the XML API provided by the JRE) then there
is a risk that Tomcat and/or the deployed application will experience errors.</p>

</section>


<section name="Running under a security manager">

<p>When running under a security manager the locations from which classes
are permitted to be loaded will also depend on the contents of your policy
file. See <a href="security-manager-howto.html">Security Manager HOW-TO</a>
for further information.</p>

</section>


</body>

</document>
