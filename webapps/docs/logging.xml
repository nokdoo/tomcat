<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document [
  <!ENTITY project SYSTEM "project.xml">
]>
<document url="logging.html">

    &project;

  <properties>
    <title>Logging in Tomcat</title>
    <author>Allistair Crossley</author>
    <author email="yoavs@apache.org">Yoav Shapira</author>
  </properties>

<body>

<section name="Table of Contents">
<toc/>
</section>

  <section name="Introduction">
    <p>
      The internal logging for Apache Tomcat uses JULI, a packaged renamed fork
      of <a href="http://commons.apache.org/logging">Apache Commons Logging</a>
      that is hard-coded to use the <code>java.util.logging</code> framework.
      This ensures that Tomcat&apos;s internal logging and any web application
      logging will remain independent, even if a web application uses Apache
      Commons Logging.
    </p>
    <p class="kor">
	  Apache Tomcat에 대한 내부 로깅은 JULI를 사용한다. JULI는 <code>java.util.logging</code> 프레임워크를 하드 코딩한 <a href="http://commons.apache.org/logging">Apache Commons Logging</a>의 이름 다른 fork버전이다. 이것은 웹 어플리케이션이 Apache Commons Logging을 사용할지라도, 톰캣의 내부 로깅과 웹 어플리케이션 로깅이 독립적으로 남아있게 보장한다.
    </p>

    <p>
      To configure Tomcat to use an alternative logging framework for its
      internal logging, follow the instructions provided by the alternative
      logging framework for redirecting logging for applications that use
      <code>java.util.logging</code>. Keep in mind that the alternative logging
      framework will need to be capable of working in an environment where
      different loggers with the same name may exist in different class loaders.
    </p>
	<p class="kor">
	  톰캣의 내부 로깅에 대한 대안적 로깅 프레임 워크를 사용하기 위한 설정을 하려면 <code>java.util.logging</code>을 사용하는 어플리케이션에 대한 로깅을 리다이렉팅하기 위해 대안적 로깅 프레임워크에서 제공하는 instructions을 따라라. 대안적 로깅 프레임워크는 같은 이름을 가진 다른 logger들이 다른 class loader에 존재하는 환경에서 작업할 수 있어야 한다.
	</p>

    <p>
      A web application running on Apache Tomcat can:
    </p>
	<p class="kor">
	  Apache Tomcat에서 실행 중인 웹 어플리케이션은 다음을 할 수 있다.
	</p>
    <ul>
      <li>
        Use any logging framework of its choice.
      </li>
      <li>
        Use system logging API, <code>java.util.logging</code>.
      </li>
      <li>
        Use the logging API provided by the Java Servlets specification,
        <code>javax.servlet.ServletContext.log(...)</code>
      </li>
    </ul>

	<ul class="kor">
	  <li>
		어플리케이션이 선택한 로깅 프레임워크를 사용한다.
	  </li>
	  <li>
		시스템 로깅 API, <code>java.util.logging</code>를 사용한다.
	  </li>
	  <li>
		Java Servlets specification이 제공하는 로깅 API	<code>javax.servlet.ServletContext.log(...)</code>를 사용한다.
	  </li>
	</ul>

    <p>
      The logging frameworks used by different web applications are independent.
      See <a href="class-loader-howto.html">class loading</a> for more details.
      The exception to this rule is <code>java.util.logging</code>. If it used
      directly or indirectly by your logging library then elements of it will be
      shared across web applications because it is loaded by the system class
      loader.
    </p>
	<p class="kor">
	  다른 웹 어플리케이션에서 사용되는 로깅 프레임워크는 독립적이다. 자세한 내용은<a href="class-loader-howto.html">class loading</a>을 보자. 이 규칙의 예외는 <code>java.util.logging</code>이다. <code>java.util.logging</code>이 당신의 로깅 라이브러리에 의해 직접적이든 간접적이든 사용된다면, 라이브러리의 각 요소들은 system class loader에 의해 로드되기 때문에 웹 어플리케이션 간 공유될 것이다.
	</p>

    <subsection name="Java logging API &#8212; java.util.logging">

    <p>
      Apache Tomcat has its own implementation of several key elements of
      <code>java.util.logging</code> API. This implementation is called JULI.
      The key component there is a custom LogManager implementation,
      that is aware of different web applications running on Tomcat (and
      their different class loaders). It supports private per-application
      logging configurations. It is also notified by Tomcat when a web application
      is unloaded from memory, so that the references to its classes can be
      cleared, preventing memory leaks.
    </p>
	<p class="kor">
	  Apache Tomcat은 <code>java.util.logging</code> API의 몇 가지 키 요소에 대한 자신만의 implementation을 가지고 있다. 이 implementation은 JULI라고 부른다. key component는 사용자 정의 LogManager implementation이며, 톰캣과 다른 class loader에서 실행 중인 다른 웹 어플리케이션을 인지한다. 이것은 어플리케이션 별 비공개 로깅 설정을 지원한다. 또한 웹 어플리케이션이 메모리에서 언로드된다면 톰캣으로부터 알림을 받을 것이고, 클래스에 대한 참조를 제거하고 memory leak을 방지한다.
	</p>

    <p>
      This <code>java.util.logging</code> implementation is enabled by providing
      certain system properties when starting Java. The Apache Tomcat startup
      scripts do this for you, but if you are using different tools to run
      Tomcat (such as jsvc, or running Tomcat from within an IDE), you should
      take care of them by yourself.
    </p>
	<p class="kor">
      이 <code>java.util.logging</code> implementation은 자바가 실행될 때 특정 시스템 프로퍼티를 제공함으로써 활성화된다. Apache Tomcat startup script는 이것을 위함이다. 하지만 당신이 톰캣을 실행시키기 위해 다른 툴을 사용한다면(IDE에서 톰캣을 실행시키거나 jsvc같은) 이것들에 주의를 기울어야 한다.
	</p>

    <p>
      More details about java.util.logging may be found in the documentation
      for your JDK and on its Javadoc pages for the <code>java.util.logging</code>
      package.
    </p>
	<p class="kor">
	  java.util.logging에 대한 자세한 정보는 JDK문서와 <code>java.util.logging</code> 패키지에 대한 Javadoc 페이지에서 찾을 수 있다.
	</p>

    <p>
      More details about Tomcat JULI may be found below.
    </p>
	<p class="kor">
	  Tomcat JULI에 대한 자세한 정보는 아래서 볼 수 있다.
	</p>

    </subsection>

    <subsection name="Servlets logging API">

    <p>
      The calls to <code>javax.servlet.ServletContext.log(...)</code> to write
      log messages are handled by internal Tomcat logging. Such messages are
      logged to the category named
    </p>
	<p class="kor">
	  로그 메세지를 작성하기 위해 <code>javax.servlet.ServletContext.log(...)</code>를 호출하는 것은 내부 톰캣 로깅에 의해 핸들링된다. 로그 메세지는 다음의 이름을 가진 카테고리에 기록된다.
	</p>
      <source>org.apache.catalina.core.ContainerBase.[${engine}].[${host}].[${context}]</source>
    <p>
      This logging is performed according to the Tomcat logging configuration. You
      cannot overwrite it in a web application.
    </p>
	<p class="kor">
	  이 로깅은 Tomcat logging configuration에 따라 수행된다. 웹 어플리케이션에서 이를 덮어씌울 수 없다.
	</p>

    <p>
      The Servlets logging API predates the <code>java.util.logging</code> API
      that is now provided by Java. As such, it does not offer you much options.
      E.g., you cannot control the log levels. It can be noted, though, that
      in Apache Tomcat implementation the calls to <code>ServletContext.log(String)</code>
      or <code>GenericServlet.log(String)</code> are logged at the INFO level.
      The calls to <code>ServletContext.log(String, Throwable)</code> or
      <code>GenericServlet.log(String, Throwable)</code>
      are logged at the SEVERE level.
    </p>

	<p class="kor">
	  Servlets logging API는 지금 자바에서 제공되고 있는 <code>java.util.logging</code> API보다 일찍 나왔다. 따라서 이것은 많은 옵션을 제공하지 않는다. 예로써, 로그 레벨을 제어할 수 없다. 그럼에도 Apache Tomcat implementation에서 <code>ServletContext.log(String)</code> 또는 <code>GenericServlet.log(String)</code>을 호출하는 것이 INFO 레벨에 기록되는 것은 주목할 만 하다. <code>ServletContext.log(String, Throwable)</code> 또는 <code>GenericServlet.log(String, Throwable)</code>을 호출하는 것은 SEVERE 레벨에 기록된다. 
	</p>

    </subsection>

    <subsection name="Console">

    <p>
      When running Tomcat on unixes, the console output is usually redirected
      to the file named <code>catalina.out</code>. The name is configurable
      using an environment variable. (See the startup scripts).
      Whatever is written to <code>System.err/out</code> will be caught into
      that file. That may include:
    </p>
	<p class="kor">
	  유닉스에서 톰캣이 실행 중이라면 콘솔 출력은 일반적으로 <code>catalina.out</code> 파일에 리다이렉팅 된다. 이 파일의 이름은 환경 변수를 이용하여 설정될 수 있다(startup script를 보자). <code>System.err/out</code>에 무엇이 작성되었건 이는 앞의 파일에서 캐치될 것이고 다음을 포함한다.
	</p>

    <ul>
      <li>Uncaught exceptions printed by <code>java.lang.ThreadGroup.uncaughtException(..)</code></li>
      <li>Thread dumps, if you requested them via a system signal</li>
    </ul>

    <ul class="kor">
      <li><code>java.lang.ThreadGroup.uncaughtException(..)</code>에 의해 프린트 되는 걸러지지 않은 예외들</li>
      <li>system signal을 통해 요청한 경우 Thread dumps</li>
    </ul>
    <p>
      When running as a service on Windows, the console output is also caught
      and redirected, but the file names are different.
    </p>
    <p class="kor">
      윈도우 서비스로서 실행 중이라도 콘솔 출력은 캐치되고 리다이렉트 되지만 파일의 이름은 다르다.
	</p>

    <p>
      The default logging configuration in Apache Tomcat writes the same
      messages to the console and to a log file. This is great when using
      Tomcat for development, but usually is not needed in production.
    </p>
	<p class="kor">
	  Apache Tomcat의 기본 로깅 설정은 같은 메세지를 콘솔과 로그 파일에 작성한다. 이것은 개발 시 톰캣을 사용할 경우 좋지만, 일반적으로 production 시에는 필요하지 않다.
	</p>

    <p>
      Old applications that still use <code>System.out</code> or <code>System.err</code>
      can be tricked by setting <code>swallowOutput</code> attribute on a
      <a href="config/context.html">Context</a>. If the attribute is set to
      <code>true</code>, the calls to <code>System.out/err</code> during request
      processing will be intercepted, and their output will be fed to the
      logging subsystem using the
      <code>javax.servlet.ServletContext.log(...)</code> calls.<br />
      <strong>Note</strong>, that the <code>swallowOutput</code>  feature is
      actually a trick, and it has its limitations.
      It works only with direct calls to <code>System.out/err</code>,
      and only during request processing cycle. It may not work in other
      threads that might be created by the application. It cannot be used to
      intercept logging frameworks that themselves write to the system streams,
      as those start early and may obtain a direct reference to the streams
      before the redirection takes place.
    </p>
	<p class="kor">
	  여전히 <code>System.out</code> 또는 <code>System.err</code>을 사용하는 오래된 어플리케이션은 <a href="config/context.html">Context</a>의 <code>swallowOutput</code>속성을 설정하여 트릭을 쓸 수 있다. 이 속성이 <code>true</code>로 설정된다면, 요청 처리 중에 <code>System.out/err</code> 호출이 인터셉트되고, 이 출력은 <code>javax.servlet.ServletContext.log(...)</code> 호출을 사용하는 로깅 subsystem에 전달될 것이다.<br>
	  <code>swallowOutput</code>특성은 사실 트릭이며 이 인터셉트는 제약을 가지고 있음을 <strong>주목하라</strong>. 이것은 오직 <code>System.out/err</code>에 대한 직접 호출을 할 때와 요청 처리 사이클 도중에만 동작한다. 이것은 어플리케이션에 의해 생성될 수 있는 다른 스레드에서 동작하지 않을 것이다. 이것은 system stream에 직접 작성하는 로깅 프레임워크를 인터셉트하기 위해서 사용될 수 없다. 이것은 로깅 프레임워크가 일찍 시작되고 리다이렉팅이 발생하기 전에 stream에 대한 참조를 직접 얻기 때문이다.

	</p>


    </subsection>

    <subsection name="Access logging">

    <p>
      Access logging is a related but different feature, which is
      implemented as a <code>Valve</code>. It uses self-contained
      logic to write its log files. The essential requirement for
      access logging is to handle a large continuous stream of data
      with low overhead, so it only uses Apache Commons Logging for
      its own debug messages. This implementation approach avoids
      additional overhead and potentially complex configuration.
      Please refer to the <a href="config/valve.html#Access_Logging">Valves</a>
      documentation for more details on its configuration, including
      the various report formats.
    </p>

    </subsection>

  </section>

  <section name="Using java.util.logging (default)">

  <p>
    The default implementation of java.util.logging provided in the JDK is too
    limited to be useful. The key limitation is the inability to have per-web
    application logging, as the configuration is per-VM. As a result, Tomcat
    will, in the default configuration, replace the default LogManager
    implementation with a container friendly implementation called JULI, which
    addresses these shortcomings.
  </p>
  <p>
    JULI supports the same configuration mechanisms as the standard JDK
    <code>java.util.logging</code>, using either a programmatic approach, or
    properties files. The main difference is that per-classloader properties
    files can be set (which enables easy redeployment friendly webapp
    configuration), and the properties files support extended constructs which
    allows more freedom for defining handlers and assigning them to loggers.
  </p>
  <p>
    JULI is enabled by default, and supports per classloader configuration, in
    addition to the regular global java.util.logging configuration. This means
    that logging can be configured at the following layers:
  </p>
    <ul>
      <li>Globally. That is usually done in the
        <code>${catalina.base}/conf/logging.properties</code> file.
        The file is specified by the <code>java.util.logging.config.file</code>
        System property which is set by the startup scripts.
        If it is not readable or is not configured, the default is to use the
        <code>${java.home}/lib/logging.properties</code> file in the JRE.
      </li>
      <li>In the web application. The file will be
        <code>WEB-INF/classes/logging.properties</code>
      </li>
    </ul>
  <p>
    The default <code>logging.properties</code> in the JRE specifies a
    <code>ConsoleHandler</code> that routes logging to System.err.
    The default <code>conf/logging.properties</code> in Apache Tomcat also
    adds several <code>FileHandler</code>s that write to files.
  </p>
  <p>
    A handler's log level threshold is INFO by default and can be set using
    SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST or ALL.
    You can also target specific packages to collect logging from and specify
    a level.
  </p>
  <p>
    To enable debug logging for part of Tomcat&apos;s internals, you should
    configure both the appropriate logger(s) and the appropriate handler(s) to
    use the <code>FINEST</code> or <code>ALL</code> level. e.g.:
  </p>
  <source>org.apache.catalina.session.level=ALL
java.util.logging.ConsoleHandler.level=ALL</source>
  <p>
    When enabling debug logging it is recommended that it is enabled for the
    narrowest possible scope as debug logging can generate large amounts of
    information.
  </p>
  <p>
    The configuration used by JULI is the same as the one supported by plain
    <code>java.util.logging</code>, but uses a few extensions to allow better
    flexibility in configuring loggers and handlers. The main differences are:
  </p>
  <ul>
      <li>A prefix may be added to handler names, so that multiple handlers of a
      single class may be instantiated. A prefix is a String which starts with a
      digit, and ends with '.'. For example, <code>22foobar.</code> is a valid
      prefix.</li>
      <li>System property replacement is performed for property values which
      contain ${systemPropertyName}.</li>
      <li>If using a class loader that implements the
      <code>org.apache.juli.WebappProperties</code> interface (Tomcat&apos;s
      web application class loader does) then property replacement is also
      performed for <code>${classloader.webappName}</code>,
      <code>${classloader.hostName}</code> and
      <code>${classloader.serviceName}</code> which are replaced with the
      web application name, the host name and the service name respectively.
      </li>
      <li>By default, loggers will not delegate to their parent if they have
      associated handlers. This may be changed per logger using the
      <code>loggerName.useParentHandlers</code> property, which accepts a
      boolean value.</li>
      <li>The root logger can define its set of handlers using the
      <code>.handlers</code> property.</li>
      <li> By default the log files will be kept on the file system
      <code>90</code>code> days. This may be changed per handler using the
      <code>handlerName.maxDays</code> property. If the specified value for the
      property is <code>&lt;=0</code> then the log files will be kept on the
      file system forever, otherwise they will be kept the specified maximum
      days.</li>
  </ul>
  <p>
    There are several additional implementation classes, that can be used
    together with the ones provided by Java. The notable one is
    <code>org.apache.juli.FileHandler</code>.
  </p>
  <p>
    <code>org.apache.juli.FileHandler</code> supports buffering of the
      logs. The buffering is not enabled by default. To configure it, use the
      <code>bufferSize</code> property of a handler. The value of <code>0</code>
      uses system default buffering (typically an 8K buffer will be used). A
      value of <code>&lt;0</code> forces a writer flush upon each log write. A
      value <code>&gt;0</code> uses a BufferedOutputStream with the defined
      value but note that the system default buffering will also be
      applied.
  </p>
  <p>
    Example logging.properties file to be placed in $CATALINA_BASE/conf:
  </p>
  <source><![CDATA[handlers = 1catalina.org.apache.juli.FileHandler, \
           2localhost.org.apache.juli.FileHandler, \
           3manager.org.apache.juli.FileHandler, \
           java.util.logging.ConsoleHandler

.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

1catalina.org.apache.juli.FileHandler.level = FINE
1catalina.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
1catalina.org.apache.juli.FileHandler.prefix = catalina.

2localhost.org.apache.juli.FileHandler.level = FINE
2localhost.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
2localhost.org.apache.juli.FileHandler.prefix = localhost.

3manager.org.apache.juli.FileHandler.level = FINE
3manager.org.apache.juli.FileHandler.directory = ${catalina.base}/logs
3manager.org.apache.juli.FileHandler.prefix = manager.
3manager.org.apache.juli.FileHandler.bufferSize = 16384

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = \
   2localhost.org.apache.juli.FileHandler

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = \
   3manager.org.apache.juli.FileHandler

# For example, set the org.apache.catalina.util.LifecycleBase logger to log
# each component that extends LifecycleBase changing state:
#org.apache.catalina.util.LifecycleBase.level = FINE]]></source>

    <p>
      Example logging.properties for the servlet-examples web application to be
      placed in WEB-INF/classes inside the web application:
    </p>
    <source><![CDATA[handlers = org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

org.apache.juli.FileHandler.level = FINE
org.apache.juli.FileHandler.directory = ${catalina.base}/logs
org.apache.juli.FileHandler.prefix = ${classloader.webappName}.

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter]]></source>


    <subsection name="Documentation references">
      <p>See the following resources for additional information:</p>
      <ul>
        <li>Apache Tomcat Javadoc for the
          <a href="api/org/apache/juli/package-summary.html"><code>org.apache.juli</code></a>
          package.
        </li>
        <li>Oracle Java 6 Javadoc for the
          <a href="http://docs.oracle.com/javase/6/docs/api/java/util/logging/package-summary.html"><code>java.util.logging</code></a>
          package.
        </li>
      </ul>
    </subsection>

    <subsection name="Considerations for production usage">
      <p>You may want to take note of the following:</p>
      <ul>
        <li>Consider removing <code>ConsoleHandler</code> from configuration. By
        default (thanks to the <code>.handlers</code> setting) logging goes both
        to a <code>FileHandler</code> and to a <code>ConsoleHandler</code>. The
        output of the latter one is usually captured into a file, such as
        <code>catalina.out</code>. Thus you end up with two copies of the same
        messages.</li>
        <li>Consider removing <code>FileHandler</code>s for the applications
        that you do not use. E.g., the one for <code>host-manager</code>.</li>
        <li>The handlers by default use the system default encoding to write
        the log files. It can be configured with <code>encoding</code> property.
        See Javadoc for details.</li>
        <li>Consider configuring an
        <a href="config/valve.html#Access_Logging">Access log</a>.</li>
      </ul>
    </subsection>

  </section>

</body>
</document>
